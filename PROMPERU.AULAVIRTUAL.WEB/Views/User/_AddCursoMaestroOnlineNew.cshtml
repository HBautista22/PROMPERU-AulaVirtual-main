
@model PROMPERU.AULAVIRTUAL.WEB.ViewModel.User._AddCursoMaestroOnlineViewModel
@{ Layout = ConstantHelpers.Layout.MODAL_LAYOUT_PATH_NEW;
                ViewBag.ModalClass = "";
                //ViewBag.ModalClass = "stick-up";
                ViewBag.ModalDialogClass = "modal-md";
                ViewBag.Form = new ModalFormHelpers("_AddCursoMaestroOnline", "User", FormMethod.Post);
                //ViewBag.Icon = "fa fa-circle";
                //ViewBag.Title = Model.CursoOnlineId;
                ViewBag.DeshabilitarCerrarFooter = true; }

@RazorHelpers.Content("assets/css/ListView.css", Url)

<div class="form-group-attached text-center">
    <br />
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.GrupoId)
    @Html.HiddenFor(x => x.ListItems, new { @id = "hitems" })

    <h2>Agregar y/o Retirar Cursos</h2>

</div>

@section Footer{
    <!--<button class="btn btn-info pull-left" type="submit"><i class="fa fa-floppy-o"></i>&nbsp;Guardar Disponibilidad</button>-->

    <div class="row">

        <div class="col-lg-6 overflow-auto">
            <h5 class="text-center">
                Cursos Agregados <i class="fa fa-list-alt" aria-hidden="true"></i>
            </h5>
            <input type="text" class="form-control" id="txtbusqueda1" name="txtbusqueda1">
            <ul id="enablesCourse" class="list-group connectedSortable text-left">

                @{ foreach (var detalle in Model.LstCursoGrupo)
                                    {
                    <li class="list-group-item" id="@detalle.CursoOnlineMaestroId">@detalle.Nombre</li> } }

                <!--<li class="emptyMessage">Sin elementos</li>-->
            </ul>

        </div>

        <div class="col-lg-6 overflow-auto">
            <h5 class="text-center">
                Cursos Disponibles <i class="fa fa-filter" aria-hidden="true"></i>
            </h5>
            <input type="text" class="form-control" id="txtbusqueda1" name="txtbusqueda1">
            <ul id="disabledCourse" class="list-group connectedSortable text-left">

                @{ foreach (var curso in Model.LstCursoOnlineMaestro)
                                    {
                    <li class="list-group-item" id="@curso.CursoOnlineMaestroId">@curso.Nombre</li> } }

                <!--<li class="emptyMessage">Sin elementos</li>-->
            </ul>

        </div>

    </div>

    <div class="row">
        <div class="col-sm-5 col-sm-offset-1 align-self-center">
            <div class="form-group form-group-default input-group">
                <button class="btn btn-guardar-matricula pull-center text-btn-generico" type="submit">Guardar</button>
            </div>
        </div>
        <div class="col-sm-5 col-sm-offset-1 align-self-center">
            <div class="form-group form-group-default input-group">
                <a class="btn btn-cancelar pull-center text-btn-generico" data-dismiss="modal" href="#">Cancelar</a>
            </div>
        </div>
    </div>

}

@RazorHelpers.Content("assets/js/backend/ListView.js", Url)

@*
    <script language="text/javascript">

        $(function () {
            $(".connectedSortable").sortable({
                connectWith: ".connectedSortable",
                items: ':not(.col-lg-6):not(.emptyMessage)',
                opacity: 0.6,
                create: function (event, ui) {
                    //hide empty message on receiver
                    $('li.emptyMessage', this).hide();

                    //show empty message on sender if applicable
                    if ($('li:not(.emptyMessage)', ui.sender).length == 0) {
                        $('li.emptyMessage', ui.sender).show();
                    } else {
                        $('li.emptyMessage', ui.sender).hide();
                    }
                }
                ,
                cursor: 'move',
                'dropOnEmpty': true,
                'scroll': true,

                receive: function (event, ui) {
                    //hide empty message on receiver
                    $('li.emptyMessage', this).hide();

                    //show empty message on sender if applicable
                    if ($('li:not(.emptyMessage)', ui.sender).length == 0) {
                        $('li.emptyMessage', ui.sender).show();
                    } else {
                        $('li.emptyMessage', ui.sender).hide();
                    }

                    var items = $("#enablesCourse").sortable("toArray");
                    var jitems = JSON.stringify(items);
                    $("#hitems").val(jitems);
                }
                /*,
                stop: function (event, ui) {

                    var items = $(this).sortable("toArray");
                    var jitems = JSON.stringify(items);
                    $("#hitems").val(jitems);

                }*/

            }).disableSelection();
        });


        $('#txtbusqueda2').bind('keyup', function () {

            var searchString = $(this).val();

            $("#disabledCourse li").each(function (index, value) {

                var currentName = $(value).text();
                if (currentName.toUpperCase().indexOf(searchString.toUpperCase()) > -1) {
                    $(value).show();
                } else {
                    $(value).hide();
                }

            });

        });



        $('#txtbusqueda1').bind('keyup', function () {

            var searchString = $(this).val();

            $("#enablesCourse li").each(function (index, value) {

                var currentName = $(value).text();
                if (currentName.toUpperCase().indexOf(searchString.toUpperCase()) > -1) {
                    $(value).show();
                } else {
                    $(value).hide();
                }

            });

        });

    </script>
*@